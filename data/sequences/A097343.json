{"greeting": "Greetings from The On-Line Encyclopedia of Integer Sequences! http://oeis.org/", "query": "id:A097343", "count": 1, "start": 0, "results": [{"number": 97343, "data": "1,-1,0,1,-1,-1,1,0,1,1,-1,1,-1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,1,-1,1,-1,-1,-1,1,1,-1,-1,-1,1,-1,1,1,0,1,-1,-1,1,1,1,1,-1,1,-1,1,-1,-1,-1,-1,1,1,-1,0,1,1,1,1,-1,1,-1,1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,-1,-1,-1,0,1,-1,-1,1,1,1,1", "name": "Triangle read by rows in which row n gives Legendre symbol (k,p) for 0<k<=p where p = n-th prime.", "comment": ["Row sums = 0. (p,k)==k^((p-1)/2) (mod p). For example, row n=4 of the triangle (for the 4th prime p = 7) reads: 1,1,-1,1,-1,-1,0 because 1^3==1, 2^3==1, 3^3==-1, 4^3==1, 5^3==-1, 6^3==-1, 7^3==0 (mod 7). - _Geoffrey Critzer_, Apr 18 2015"], "link": ["Reinhard Zumkeller, <a href=\"/A097343/b097343.txt\">Rows n = 2..75 of triangle, flattened</a>", "Haskell for Math, <a href=\"https://github.com/algal/projecteuler/blob/master/haskellformath/NumberTheoryFundamentals.hs\">Number Theory Fundamentals</a>", "Wikipedia, <a href=\"http://en.wikipedia.org/wiki/Legendre_symbol\">Legendre symbol</a>"], "formula": ["(p, p)=0, all others are +- 1."], "example": ["1,-1,0 ; # A102283", "1,-1,-1,1,0; # A080891", "1,1,-1,1,-1,-1,0; # A175629", "1,-1,1,1,1,-1,-1,-1,1,-1,0; # A011582"], "maple": ["with(numtheory):", "T:= n-> (p-> seq(jacobi(k, p), k=1..p))(ithprime(n)):", "seq(T(n), n=2..15);  # _Alois P. Heinz_, Apr 19 2015"], "mathematica": ["Flatten[ Table[ JacobiSymbol[ Range[ Prime[n]], Prime[n]], {n, 2, 8}]]"], "program": ["(Haskell)", "a097343 n k = a097343_tabf !! (n-2) !! (k-1)", "a097343_row n = a097343_tabf !! (n-2)", "a097343_tabf =", "   map (\\p -> map (flip legendreSymbol p) [1..p]) $ tail a000040_list", "legendreSymbol a p = if a' == 0 then 0 else twoSymbol * oddSymbol where", "   a' = a `mod` p", "   (s,q) = a' `splitWith` 2", "   twoSymbol = if (p `mod` 8) `elem` [1,7] || even s then 1 else -1", "   oddSymbol = if q == 1 then 1 else qrMultiplier * legendreSymbol p q", "   qrMultiplier = if p `mod` 4 == 3 && q `mod` 4 == 3 then -1 else 1", "   splitWith n p = spw 0 n where", "      spw s t = if m > 0 then (s, t) else spw (s + 1) t'", "                where (t', m) = divMod t p", "-- See link.  _Reinhard Zumkeller_, Feb 02 2014"], "xref": ["See A226520 for another version.", "Cf. A068717."], "keyword": "sign,tabf", "offset": "2,1", "author": "_Robert G. Wilson v_, Aug 02 2004", "references": 6, "revision": 21, "time": "2016-11-13T17:07:03-05:00", "created": "2004-09-22T03:00:00-04:00"}]}